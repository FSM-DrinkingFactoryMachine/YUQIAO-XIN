/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkfactorymachine;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkFactoryMachineStatemachine implements IDrinkFactoryMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean select_Type_Btn;
		
		
		public void raiseSelect_Type_Btn() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							select_Type_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean pay_coins_Btn;
		
		
		public void raisePay_coins_Btn() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							pay_coins_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFC_Btn;
		
		
		public void raiseNFC_Btn() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFC_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancle_Btn;
		
		
		public void raiseCancle_Btn() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancle_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCup_Btn;
		
		
		public void raiseAddCup_Btn() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCup_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean modify_Slider;
		
		
		public void raiseModify_Slider() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							modify_Slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		private boolean doPrepare;
		
		
		public boolean isRaisedDoPrepare() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				return doPrepare;
			}
		}
		
		protected void raiseDoPrepare() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				doPrepare = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPrepareRaised();
				}
			}
		}
		
		private boolean doModify;
		
		
		public boolean isRaisedDoModify() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				return doModify;
			}
		}
		
		protected void raiseDoModify() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				doModify = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoModifyRaised();
				}
			}
		}
		
		private boolean doCaculate;
		
		
		public boolean isRaisedDoCaculate() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				return doCaculate;
			}
		}
		
		protected void raiseDoCaculate() {
			synchronized(DrinkFactoryMachineStatemachine.this) {
				doCaculate = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCaculateRaised();
				}
			}
		}
		
		protected void clearEvents() {
			select_Type_Btn = false;
			pay_coins_Btn = false;
			nFC_Btn = false;
			cancle_Btn = false;
			addCup_Btn = false;
			modify_Slider = false;
		}
		protected void clearOutEvents() {
		
		doReset = false;
		doPrepare = false;
		doModify = false;
		doCaculate = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_StateInitiale,
		main_region_StateSelect,
		main_region_StateSelect_select_type_SecectType,
		main_region_StateSelect_Modify_drink_ModifyDrink,
		main_region_StateSelect_caculate_money_StateCount,
		main_region_StatePrepare,
		main_region_StatePay,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[5];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	private boolean deal;
	
	protected boolean getDeal() {
		synchronized(DrinkFactoryMachineStatemachine.this) {
			return deal;
		}
	}
	
	public void setDeal(boolean value) {
		synchronized(DrinkFactoryMachineStatemachine.this) {
			this.deal = value;
		}
	}
	
	
	private boolean biip;
	
	protected boolean getBiip() {
		synchronized(DrinkFactoryMachineStatemachine.this) {
			return biip;
		}
	}
	
	public void setBiip(boolean value) {
		synchronized(DrinkFactoryMachineStatemachine.this) {
			this.biip = value;
		}
	}
	
	
	public DrinkFactoryMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		setDeal(false);
		
		setBiip(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_StateInitiale:
				main_region_StateInitiale_react(true);
				break;
			case main_region_StateSelect_select_type_SecectType:
				main_region_StateSelect_select_type_SecectType_react(true);
				break;
			case main_region_StateSelect_Modify_drink_ModifyDrink:
				main_region_StateSelect_Modify_drink_ModifyDrink_react(true);
				break;
			case main_region_StateSelect_caculate_money_StateCount:
				main_region_StateSelect_caculate_money_StateCount_react(true);
				break;
			case main_region_StatePrepare:
				main_region_StatePrepare_react(true);
				break;
			case main_region_StatePay:
				main_region_StatePay_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_StateInitiale:
			return stateVector[0] == State.main_region_StateInitiale;
		case main_region_StateSelect:
			return stateVector[0].ordinal() >= State.
					main_region_StateSelect.ordinal()&& stateVector[0].ordinal() <= State.main_region_StateSelect_caculate_money_StateCount.ordinal();
		case main_region_StateSelect_select_type_SecectType:
			return stateVector[0] == State.main_region_StateSelect_select_type_SecectType;
		case main_region_StateSelect_Modify_drink_ModifyDrink:
			return stateVector[1] == State.main_region_StateSelect_Modify_drink_ModifyDrink;
		case main_region_StateSelect_caculate_money_StateCount:
			return stateVector[2] == State.main_region_StateSelect_caculate_money_StateCount;
		case main_region_StatePrepare:
			return stateVector[0] == State.main_region_StatePrepare;
		case main_region_StatePay:
			return stateVector[0] == State.main_region_StatePay;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseSelect_Type_Btn() {
		sCInterface.raiseSelect_Type_Btn();
	}
	
	public synchronized void raisePay_coins_Btn() {
		sCInterface.raisePay_coins_Btn();
	}
	
	public synchronized void raiseNFC_Btn() {
		sCInterface.raiseNFC_Btn();
	}
	
	public synchronized void raiseCancle_Btn() {
		sCInterface.raiseCancle_Btn();
	}
	
	public synchronized void raiseAddCup_Btn() {
		sCInterface.raiseAddCup_Btn();
	}
	
	public synchronized void raiseModify_Slider() {
		sCInterface.raiseModify_Slider();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public synchronized boolean isRaisedDoPrepare() {
		return sCInterface.isRaisedDoPrepare();
	}
	
	public synchronized boolean isRaisedDoModify() {
		return sCInterface.isRaisedDoModify();
	}
	
	public synchronized boolean isRaisedDoCaculate() {
		return sCInterface.isRaisedDoCaculate();
	}
	
	/* Entry action for state 'StateInitiale'. */
	private void entryAction_main_region_StateInitiale() {
		sCInterface.raiseDoReset();
	}
	
	/* Entry action for state 'StateSelect'. */
	private void entryAction_main_region_StateSelect() {
		timer.setTimer(this, 0, (5 * 1000), false);
		
		timer.setTimer(this, 1, (5 * 1000), false);
	}
	
	/* Entry action for state 'StatePrepare'. */
	private void entryAction_main_region_StatePrepare() {
		timer.setTimer(this, 2, (15 * 1000), false);
		
		sCInterface.raiseDoPrepare();
	}
	
	/* Entry action for state 'StatePay'. */
	private void entryAction_main_region_StatePay() {
		timer.setTimer(this, 3, (1 * 1000), false);
		
		timer.setTimer(this, 4, (1 * 1000), false);
		
		sCInterface.raiseDoCaculate();
	}
	
	/* Exit action for state 'StateSelect'. */
	private void exitAction_main_region_StateSelect() {
		timer.unsetTimer(this, 0);
		
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'StatePrepare'. */
	private void exitAction_main_region_StatePrepare() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'StatePay'. */
	private void exitAction_main_region_StatePay() {
		timer.unsetTimer(this, 3);
		
		timer.unsetTimer(this, 4);
	}
	
	/* 'default' enter sequence for state StateInitiale */
	private void enterSequence_main_region_StateInitiale_default() {
		entryAction_main_region_StateInitiale();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateInitiale;
	}
	
	/* 'default' enter sequence for state StateSelect */
	private void enterSequence_main_region_StateSelect_default() {
		entryAction_main_region_StateSelect();
		enterSequence_main_region_StateSelect_select_type_default();
		enterSequence_main_region_StateSelect_Modify_drink_default();
		enterSequence_main_region_StateSelect_caculate_money_default();
	}
	
	/* 'default' enter sequence for state SecectType */
	private void enterSequence_main_region_StateSelect_select_type_SecectType_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateSelect_select_type_SecectType;
	}
	
	/* 'default' enter sequence for state ModifyDrink */
	private void enterSequence_main_region_StateSelect_Modify_drink_ModifyDrink_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_StateSelect_Modify_drink_ModifyDrink;
	}
	
	/* 'default' enter sequence for state StateCount */
	private void enterSequence_main_region_StateSelect_caculate_money_StateCount_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_StateSelect_caculate_money_StateCount;
	}
	
	/* 'default' enter sequence for state StatePrepare */
	private void enterSequence_main_region_StatePrepare_default() {
		entryAction_main_region_StatePrepare();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StatePrepare;
	}
	
	/* 'default' enter sequence for state StatePay */
	private void enterSequence_main_region_StatePay_default() {
		entryAction_main_region_StatePay();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StatePay;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region select_type */
	private void enterSequence_main_region_StateSelect_select_type_default() {
		react_main_region_StateSelect_select_type__entry_Default();
	}
	
	/* 'default' enter sequence for region Modify_drink */
	private void enterSequence_main_region_StateSelect_Modify_drink_default() {
		react_main_region_StateSelect_Modify_drink__entry_Default();
	}
	
	/* 'default' enter sequence for region caculate_money */
	private void enterSequence_main_region_StateSelect_caculate_money_default() {
		react_main_region_StateSelect_caculate_money__entry_Default();
	}
	
	/* Default exit sequence for state StateInitiale */
	private void exitSequence_main_region_StateInitiale() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateSelect */
	private void exitSequence_main_region_StateSelect() {
		exitSequence_main_region_StateSelect_select_type();
		exitSequence_main_region_StateSelect_Modify_drink();
		exitSequence_main_region_StateSelect_caculate_money();
		exitAction_main_region_StateSelect();
	}
	
	/* Default exit sequence for state SecectType */
	private void exitSequence_main_region_StateSelect_select_type_SecectType() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state ModifyDrink */
	private void exitSequence_main_region_StateSelect_Modify_drink_ModifyDrink() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state StateCount */
	private void exitSequence_main_region_StateSelect_caculate_money_StateCount() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state StatePrepare */
	private void exitSequence_main_region_StatePrepare() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_StatePrepare();
	}
	
	/* Default exit sequence for state StatePay */
	private void exitSequence_main_region_StatePay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_StatePay();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_StateInitiale:
			exitSequence_main_region_StateInitiale();
			break;
		case main_region_StateSelect_select_type_SecectType:
			exitSequence_main_region_StateSelect_select_type_SecectType();
			break;
		case main_region_StatePrepare:
			exitSequence_main_region_StatePrepare();
			break;
		case main_region_StatePay:
			exitSequence_main_region_StatePay();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_StateSelect_Modify_drink_ModifyDrink:
			exitSequence_main_region_StateSelect_Modify_drink_ModifyDrink();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_StateSelect_caculate_money_StateCount:
			exitSequence_main_region_StateSelect_caculate_money_StateCount();
			exitAction_main_region_StateSelect();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region select_type */
	private void exitSequence_main_region_StateSelect_select_type() {
		switch (stateVector[0]) {
		case main_region_StateSelect_select_type_SecectType:
			exitSequence_main_region_StateSelect_select_type_SecectType();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Modify_drink */
	private void exitSequence_main_region_StateSelect_Modify_drink() {
		switch (stateVector[1]) {
		case main_region_StateSelect_Modify_drink_ModifyDrink:
			exitSequence_main_region_StateSelect_Modify_drink_ModifyDrink();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region caculate_money */
	private void exitSequence_main_region_StateSelect_caculate_money() {
		switch (stateVector[2]) {
		case main_region_StateSelect_caculate_money_StateCount:
			exitSequence_main_region_StateSelect_caculate_money_StateCount();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateInitiale_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_StateSelect_select_type__entry_Default() {
		enterSequence_main_region_StateSelect_select_type_SecectType_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_StateSelect_Modify_drink__entry_Default() {
		enterSequence_main_region_StateSelect_Modify_drink_ModifyDrink_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_StateSelect_caculate_money__entry_Default() {
		enterSequence_main_region_StateSelect_caculate_money_StateCount_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateInitiale_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.select_Type_Btn) {
				exitSequence_main_region_StateInitiale();
				enterSequence_main_region_StateSelect_default();
				react();
			} else {
				if (sCInterface.pay_coins_Btn) {
					exitSequence_main_region_StateInitiale();
					enterSequence_main_region_StateSelect_default();
					react();
				} else {
					if (sCInterface.nFC_Btn) {
						exitSequence_main_region_StateInitiale();
						setBiip(true);
						
						enterSequence_main_region_StateSelect_default();
						react();
					} else {
						if (sCInterface.modify_Slider) {
							exitSequence_main_region_StateInitiale();
							enterSequence_main_region_StateSelect_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StateSelect_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancle_Btn) {
				exitSequence_main_region_StateSelect();
				enterSequence_main_region_StateInitiale_default();
				react();
			} else {
				if (sCInterface.nFC_Btn) {
					exitSequence_main_region_StateSelect();
					enterSequence_main_region_StatePrepare_default();
					react();
				} else {
					if (((timeEvents[0]) && (getBiip()))) {
						exitSequence_main_region_StateSelect();
						enterSequence_main_region_StatePrepare_default();
						react();
					} else {
						if (((timeEvents[1]) && (!getBiip()))) {
							exitSequence_main_region_StateSelect();
							enterSequence_main_region_StatePay_default();
							react();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StateSelect_select_type_SecectType_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.select_Type_Btn) {
				exitSequence_main_region_StateSelect_select_type_SecectType();
				enterSequence_main_region_StateSelect_select_type_SecectType_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateSelect_Modify_drink_ModifyDrink_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.modify_Slider) {
				exitSequence_main_region_StateSelect_Modify_drink_ModifyDrink();
				sCInterface.raiseDoModify();
				
				enterSequence_main_region_StateSelect_Modify_drink_ModifyDrink_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_StateSelect_caculate_money_StateCount_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.pay_coins_Btn) {
				exitSequence_main_region_StateSelect_caculate_money_StateCount();
				enterSequence_main_region_StateSelect_caculate_money_StateCount_default();
				main_region_StateSelect_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_StateSelect_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_StatePrepare_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_region_StatePrepare();
				enterSequence_main_region_StateInitiale_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_StatePay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3]) && (getDeal()))) {
				exitSequence_main_region_StatePay();
				enterSequence_main_region_StatePrepare_default();
				react();
			} else {
				if (((timeEvents[4]) && (!getDeal()))) {
					exitSequence_main_region_StatePay();
					enterSequence_main_region_StateInitiale_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
