/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.drinkfactorymachinesatemachine;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DrinkFactoryMachineSateMachineStatemachine implements IDrinkFactoryMachineSateMachineStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean cof_Btn;
		
		
		public void raiseCof_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cof_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean exp_Btn;
		
		
		public void raiseExp_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							exp_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean tea_Btn;
		
		
		public void raiseTea_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							tea_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean soup_Btn;
		
		
		public void raiseSoup_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							soup_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean iceTea_Btn;
		
		
		public void raiseIceTea_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							iceTea_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coins50_Btn;
		
		
		public void raiseCoins50_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coins50_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coins25_Btn;
		
		
		public void raiseCoins25_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coins25_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coins10_Btn;
		
		
		public void raiseCoins10_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coins10_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nFC_Btn;
		
		
		public void raiseNFC_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nFC_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancle_Btn;
		
		
		public void raiseCancle_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancle_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCup_Btn;
		
		
		public void raiseAddCup_Btn() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCup_Btn = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean suger_Slider;
		
		
		public void raiseSuger_Slider() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							suger_Slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean size_Slider;
		
		
		public void raiseSize_Slider() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							size_Slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean tem_Slider;
		
		
		public void raiseTem_Slider() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							tem_Slider = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DrinkFactoryMachineSateMachineStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		protected void clearEvents() {
			cof_Btn = false;
			exp_Btn = false;
			tea_Btn = false;
			soup_Btn = false;
			iceTea_Btn = false;
			coins50_Btn = false;
			coins25_Btn = false;
			coins10_Btn = false;
			nFC_Btn = false;
			cancle_Btn = false;
			addCup_Btn = false;
			suger_Slider = false;
			size_Slider = false;
			tem_Slider = false;
		}
		protected void clearOutEvents() {
		
		doReset = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_StateInitiale,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DrinkFactoryMachineSateMachineStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_StateInitiale:
				main_region_StateInitiale_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_StateInitiale:
			return stateVector[0] == State.main_region_StateInitiale;
		default:
			return false;
		}
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCof_Btn() {
		sCInterface.raiseCof_Btn();
	}
	
	public synchronized void raiseExp_Btn() {
		sCInterface.raiseExp_Btn();
	}
	
	public synchronized void raiseTea_Btn() {
		sCInterface.raiseTea_Btn();
	}
	
	public synchronized void raiseSoup_Btn() {
		sCInterface.raiseSoup_Btn();
	}
	
	public synchronized void raiseIceTea_Btn() {
		sCInterface.raiseIceTea_Btn();
	}
	
	public synchronized void raiseCoins50_Btn() {
		sCInterface.raiseCoins50_Btn();
	}
	
	public synchronized void raiseCoins25_Btn() {
		sCInterface.raiseCoins25_Btn();
	}
	
	public synchronized void raiseCoins10_Btn() {
		sCInterface.raiseCoins10_Btn();
	}
	
	public synchronized void raiseNFC_Btn() {
		sCInterface.raiseNFC_Btn();
	}
	
	public synchronized void raiseCancle_Btn() {
		sCInterface.raiseCancle_Btn();
	}
	
	public synchronized void raiseAddCup_Btn() {
		sCInterface.raiseAddCup_Btn();
	}
	
	public synchronized void raiseSuger_Slider() {
		sCInterface.raiseSuger_Slider();
	}
	
	public synchronized void raiseSize_Slider() {
		sCInterface.raiseSize_Slider();
	}
	
	public synchronized void raiseTem_Slider() {
		sCInterface.raiseTem_Slider();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	/* Entry action for state 'StateInitiale'. */
	private void entryAction_main_region_StateInitiale() {
		sCInterface.raiseDoReset();
	}
	
	/* 'default' enter sequence for state StateInitiale */
	private void enterSequence_main_region_StateInitiale_default() {
		entryAction_main_region_StateInitiale();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_StateInitiale;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state StateInitiale */
	private void exitSequence_main_region_StateInitiale() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_StateInitiale:
			exitSequence_main_region_StateInitiale();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_StateInitiale_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_StateInitiale_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
